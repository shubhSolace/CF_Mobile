/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
export class DomChangeDirective {
    /**
     * @param {?} elementRef
     */
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.domChange = new EventEmitter();
        /** @type {?} */
        const element = this.elementRef.nativeElement;
        this.changes = new MutationObserver((/**
         * @param {?} mutations
         * @return {?}
         */
        (mutations) => {
            mutations.forEach((/**
             * @param {?} mutation
             * @return {?}
             */
            (mutation) => this.domChange.emit(mutation)));
        }));
        this.changes.observe(element, {
            attributes: true,
            childList: true,
            characterData: true
        });
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.changes.disconnect();
    }
}
DomChangeDirective.decorators = [
    { type: Directive, args: [{
                selector: '[domChange]'
            },] }
];
/** @nocollapse */
DomChangeDirective.ctorParameters = () => [
    { type: ElementRef }
];
DomChangeDirective.propDecorators = {
    domChange: [{ type: Output }]
};
if (false) {
    /**
     * @type {?}
     * @private
     */
    DomChangeDirective.prototype.changes;
    /** @type {?} */
    DomChangeDirective.prototype.domChange;
    /**
     * @type {?}
     * @private
     */
    DomChangeDirective.prototype.elementRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9tLWNoYW5nZS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtY2Fyb3VzZWwtbGliLyIsInNvdXJjZXMiOlsibGliL2RpcmVjdGl2ZXMvZG9tLWNoYW5nZS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBYSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLdkYsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUs3QixZQUFvQixVQUFzQjtRQUF0QixlQUFVLEdBQVYsVUFBVSxDQUFZO1FBRnpCLGNBQVMsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDOztjQUd4QyxPQUFPLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhO1FBRTdDLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxnQkFBZ0I7Ozs7UUFBQyxDQUFDLFNBQTJCLEVBQUUsRUFBRTtZQUNoRSxTQUFTLENBQUMsT0FBTzs7OztZQUFDLENBQUMsUUFBd0IsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUMsQ0FBQztRQUNqRixDQUFDLEVBQ0YsQ0FBQztRQUVGLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRTtZQUM1QixVQUFVLEVBQUUsSUFBSTtZQUNoQixTQUFTLEVBQUUsSUFBSTtZQUNmLGFBQWEsRUFBRSxJQUFJO1NBQ3BCLENBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7WUF6QkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxhQUFhO2FBQ3hCOzs7O1lBSm1CLFVBQVU7Ozt3QkFRM0IsTUFBTTs7Ozs7OztJQUZQLHFDQUFrQzs7SUFFbEMsdUNBQWdEOzs7OztJQUVwQyx3Q0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBPdXRwdXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAnW2RvbUNoYW5nZV0nXG59KVxuZXhwb3J0IGNsYXNzIERvbUNoYW5nZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uRGVzdHJveSB7XG4gIHByaXZhdGUgY2hhbmdlczogTXV0YXRpb25PYnNlcnZlcjtcblxuICBAT3V0cHV0KCkgcHVibGljIGRvbUNoYW5nZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYpIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG5cbiAgICB0aGlzLmNoYW5nZXMgPSBuZXcgTXV0YXRpb25PYnNlcnZlcigobXV0YXRpb25zOiBNdXRhdGlvblJlY29yZFtdKSA9PiB7XG4gICAgICAgIG11dGF0aW9ucy5mb3JFYWNoKChtdXRhdGlvbjogTXV0YXRpb25SZWNvcmQpID0+IHRoaXMuZG9tQ2hhbmdlLmVtaXQobXV0YXRpb24pKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgdGhpcy5jaGFuZ2VzLm9ic2VydmUoZWxlbWVudCwge1xuICAgICAgYXR0cmlidXRlczogdHJ1ZSxcbiAgICAgIGNoaWxkTGlzdDogdHJ1ZSxcbiAgICAgIGNoYXJhY3RlckRhdGE6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCk6IHZvaWQge1xuICAgIHRoaXMuY2hhbmdlcy5kaXNjb25uZWN0KCk7XG4gIH1cbn1cbiJdfQ==