/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, HostListener, ElementRef, Renderer2, Output, EventEmitter } from '@angular/core';
/** @type {?} */
const ZERO = 0.000000000001;
/** @type {?} */
const DIRECTION = {
    LEFT: 'left',
    RIGHT: 'right',
    UP: 'up',
    DOWN: 'down',
    NONE: 'none',
};
export class SwiperDirective {
    /**
     * @param {?} el
     * @param {?} renderer
     */
    constructor(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.isDown = false;
        this.initialPosX = ZERO;
        this.initialPosY = ZERO;
        this.lastPosX = ZERO;
        this.lastPosY = ZERO;
        this.swipeDistanceX = ZERO;
        this.swipeDistanceY = ZERO;
        this.firstSwipeDate = Date.now();
        this.direction = DIRECTION.NONE;
        this.onSwipeRight = new EventEmitter();
        this.onSwipeLeft = new EventEmitter();
        this.onSwipeUp = new EventEmitter();
        this.onSwipeDown = new EventEmitter();
        this.onSwipe = new EventEmitter();
        this.onSwipeStart = new EventEmitter();
        this.onSwipeEnd = new EventEmitter();
        this.swipeLeft = new EventEmitter();
        this.swipeRight = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} event
     * @return {?}
     */
    getResultFromEvent(event) {
        /** @type {?} */
        let swipeFrameDistanceX = event.clientX - this.initialPosX - this.lastPosX;
        swipeFrameDistanceX = swipeFrameDistanceX < 30 ? swipeFrameDistanceX : 30;
        this.swipeDistanceX += swipeFrameDistanceX;
        /** @type {?} */
        let swipeFrameDistanceY = event.clientY - this.initialPosY - this.lastPosY;
        swipeFrameDistanceY = swipeFrameDistanceY < 30 ? swipeFrameDistanceY : 30;
        this.swipeDistanceY += swipeFrameDistanceY;
        this.lastPosX = event.clientX - this.initialPosX;
        this.lastPosY = event.clientY - this.initialPosY;
        /** @type {?} */
        const res = {
            velocityX: swipeFrameDistanceX,
            velocityY: swipeFrameDistanceY,
            isFinal: false,
            direction: this.direction,
            event: event,
        };
        return res;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    swipeStart(event) {
        this.firstSwipeDate = Date.now();
        this.isDown = true;
        this.initialPosX = event.clientX;
        this.initialPosY = event.clientY;
        this.swipeDistanceX = ZERO;
        this.swipeDistanceY = ZERO;
        this.onSwipeStart.emit();
    }
    /**
     * @param {?} event
     * @return {?}
     */
    swipeEnd(event) {
        this.initialPosX = this.lastPosX = ZERO;
        this.initialPosY = this.lastPosY = ZERO;
        this.isDown = false;
        /** @type {?} */
        const res = {
            velocityX: 0,
            velocityY: 0,
            isFinal: !this.isDown,
        };
        this.onSwipeEnd.emit(res);
        this.swipeDistanceX = ZERO;
        this.swipeDistanceY = ZERO;
    }
    /**
     * @param {?} event
     * @return {?}
     */
    swipeMove(event) {
        /** @type {?} */
        const res = this.getResultFromEvent(event);
        if (res.velocityX > 0) {
            this.direction = DIRECTION.LEFT;
            this.onSwipeLeft.emit(res);
        }
        else if (res.velocityX < 0) {
            this.direction = DIRECTION.RIGHT;
            this.onSwipeRight.emit(res);
        }
        else if (res.velocityY > 0) {
            this.direction = DIRECTION.DOWN;
            this.onSwipeDown.emit(res);
        }
        else if (res.velocityY < 0) {
            this.direction = DIRECTION.UP;
            this.onSwipeUp.emit(res);
        }
        this.onSwipe.emit(res);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchStart(event) {
        /** @type {?} */
        const touch = event.touches[0] || event.changedTouches[0];
        this.swipeStart(touch);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseDown(event) {
        this.swipeStart(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseUp(event) {
        this.swipeEnd(event);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchEnd(event) {
        /** @type {?} */
        const touch = event.touches[0] || event.changedTouches[0];
        this.swipeEnd(touch);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onMouseMove(event) {
        if (this.isDown) {
            this.swipeMove(event);
        }
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onTouchMove(event) {
        /** @type {?} */
        const touch = event.touches[0] || event.changedTouches[0];
        this.swipeMove(touch);
    }
}
SwiperDirective.decorators = [
    { type: Directive, args: [{
                selector: '[swiper]',
                exportAs: 'swiper'
            },] }
];
/** @nocollapse */
SwiperDirective.ctorParameters = () => [
    { type: ElementRef },
    { type: Renderer2 }
];
SwiperDirective.propDecorators = {
    onSwipeRight: [{ type: Output }],
    onSwipeLeft: [{ type: Output }],
    onSwipeUp: [{ type: Output }],
    onSwipeDown: [{ type: Output }],
    onSwipe: [{ type: Output }],
    onSwipeStart: [{ type: Output }],
    onSwipeEnd: [{ type: Output }],
    swipeLeft: [{ type: Output }],
    swipeRight: [{ type: Output }],
    onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
    onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
    onMouseUp: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
    onTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }],
    onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }],
    onTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    SwiperDirective.prototype.isDown;
    /** @type {?} */
    SwiperDirective.prototype.initialPosX;
    /** @type {?} */
    SwiperDirective.prototype.initialPosY;
    /** @type {?} */
    SwiperDirective.prototype.lastPosX;
    /** @type {?} */
    SwiperDirective.prototype.lastPosY;
    /** @type {?} */
    SwiperDirective.prototype.swipeDistanceX;
    /** @type {?} */
    SwiperDirective.prototype.swipeDistanceY;
    /** @type {?} */
    SwiperDirective.prototype.firstSwipeDate;
    /** @type {?} */
    SwiperDirective.prototype.direction;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeRight;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeLeft;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeUp;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeDown;
    /** @type {?} */
    SwiperDirective.prototype.onSwipe;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeStart;
    /** @type {?} */
    SwiperDirective.prototype.onSwipeEnd;
    /** @type {?} */
    SwiperDirective.prototype.swipeLeft;
    /** @type {?} */
    SwiperDirective.prototype.swipeRight;
    /**
     * @type {?}
     * @private
     */
    SwiperDirective.prototype.el;
    /**
     * @type {?}
     * @private
     */
    SwiperDirective.prototype.renderer;
}
//# sourceMappingURL=data:application/json;base64,