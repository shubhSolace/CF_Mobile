import { __spread } from 'tslib';
import { Directive, HostListener, ElementRef, Renderer2, Output, EventEmitter, Component, Input, ViewChild, NgModule } from '@angular/core';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * :tmtfactory) Â© 2017
 * Alex Marcos <alejandro.marcos@tmtfactory.com>
 * @ignore
 */
var Carousel = /** @class */ (function () {
    function Carousel() {
        this._currdeg = 0;
        this._totalItems = 0;
        this._maxWidthSize = 0;
        this._maxHeightSize = 0;
        this._maxDegree = 0;
        this._totalWidth = 0;
        this._isHorizontal = false;
        this._items = [];
        this._degreesSlides = [];
        this._activeIndex = 0;
        this._lastIndex = -1;
        this._lockSlides = false;
        this._autoPlayIsRunning = false;
    }
    Object.defineProperty(Carousel.prototype, "autoPlayIsRunning", {
        get: /**
         * @return {?}
         */
        function () {
            return this._autoPlayIsRunning;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._autoPlayIsRunning = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "currdeg", {
        get: /**
         * @return {?}
         */
        function () {
            return this._currdeg;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._currdeg = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "totalItems", {
        get: /**
         * @return {?}
         */
        function () {
            return this._totalItems;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._totalItems = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "isHorizontal", {
        get: /**
         * @return {?}
         */
        function () {
            return this._isHorizontal;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._isHorizontal = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "maxWidthSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxWidthSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxWidthSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "maxHeightSize", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxHeightSize;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxHeightSize = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "maxDegree", {
        get: /**
         * @return {?}
         */
        function () {
            return this._maxDegree;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._maxDegree = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "totalWidth", {
        get: /**
         * @return {?}
         */
        function () {
            return this._totalWidth;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._totalWidth = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "items", {
        get: /**
         * @return {?}
         */
        function () {
            return this._items;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._items = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "degreesSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._degreesSlides;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._degreesSlides = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "activeIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._activeIndex;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._activeIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "lockSlides", {
        get: /**
         * @return {?}
         */
        function () {
            return this._lockSlides;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._lockSlides = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Carousel.prototype, "lastIndex", {
        get: /**
         * @return {?}
         */
        function () {
            return this._lastIndex;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._lastIndex = value;
        },
        enumerable: true,
        configurable: true
    });
    return Carousel;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var ZERO = 0.000000000001;
/** @type {?} */
var DIRECTION = {
    LEFT: 'left',
    RIGHT: 'right',
    UP: 'up',
    DOWN: 'down',
    NONE: 'none',
};
var SwiperDirective = /** @class */ (function () {
    function SwiperDirective(el, renderer) {
        this.el = el;
        this.renderer = renderer;
        this.isDown = false;
        this.initialPosX = ZERO;
        this.initialPosY = ZERO;
        this.lastPosX = ZERO;
        this.lastPosY = ZERO;
        this.swipeDistanceX = ZERO;
        this.swipeDistanceY = ZERO;
        this.firstSwipeDate = Date.now();
        this.direction = DIRECTION.NONE;
        this.onSwipeRight = new EventEmitter();
        this.onSwipeLeft = new EventEmitter();
        this.onSwipeUp = new EventEmitter();
        this.onSwipeDown = new EventEmitter();
        this.onSwipe = new EventEmitter();
        this.onSwipeStart = new EventEmitter();
        this.onSwipeEnd = new EventEmitter();
        this.swipeLeft = new EventEmitter();
        this.swipeRight = new EventEmitter();
    }
    /**
     * @return {?}
     */
    SwiperDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.getResultFromEvent = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var swipeFrameDistanceX = event.clientX - this.initialPosX - this.lastPosX;
        swipeFrameDistanceX = swipeFrameDistanceX < 30 ? swipeFrameDistanceX : 30;
        this.swipeDistanceX += swipeFrameDistanceX;
        /** @type {?} */
        var swipeFrameDistanceY = event.clientY - this.initialPosY - this.lastPosY;
        swipeFrameDistanceY = swipeFrameDistanceY < 30 ? swipeFrameDistanceY : 30;
        this.swipeDistanceY += swipeFrameDistanceY;
        this.lastPosX = event.clientX - this.initialPosX;
        this.lastPosY = event.clientY - this.initialPosY;
        /** @type {?} */
        var res = {
            velocityX: swipeFrameDistanceX,
            velocityY: swipeFrameDistanceY,
            isFinal: false,
            direction: this.direction,
            event: event,
        };
        return res;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.swipeStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.firstSwipeDate = Date.now();
        this.isDown = true;
        this.initialPosX = event.clientX;
        this.initialPosY = event.clientY;
        this.swipeDistanceX = ZERO;
        this.swipeDistanceY = ZERO;
        this.onSwipeStart.emit();
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.swipeEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.initialPosX = this.lastPosX = ZERO;
        this.initialPosY = this.lastPosY = ZERO;
        this.isDown = false;
        /** @type {?} */
        var res = {
            velocityX: 0,
            velocityY: 0,
            isFinal: !this.isDown,
        };
        this.onSwipeEnd.emit(res);
        this.swipeDistanceX = ZERO;
        this.swipeDistanceY = ZERO;
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.swipeMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var res = this.getResultFromEvent(event);
        if (res.velocityX > 0) {
            this.direction = DIRECTION.LEFT;
            this.onSwipeLeft.emit(res);
        }
        else if (res.velocityX < 0) {
            this.direction = DIRECTION.RIGHT;
            this.onSwipeRight.emit(res);
        }
        else if (res.velocityY > 0) {
            this.direction = DIRECTION.DOWN;
            this.onSwipeDown.emit(res);
        }
        else if (res.velocityY < 0) {
            this.direction = DIRECTION.UP;
            this.onSwipeUp.emit(res);
        }
        this.onSwipe.emit(res);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onTouchStart = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var touch = event.touches[0] || event.changedTouches[0];
        this.swipeStart(touch);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onMouseDown = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.swipeStart(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onMouseUp = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.swipeEnd(event);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onTouchEnd = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var touch = event.touches[0] || event.changedTouches[0];
        this.swipeEnd(touch);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onMouseMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.isDown) {
            this.swipeMove(event);
        }
    };
    /**
     * @param {?} event
     * @return {?}
     */
    SwiperDirective.prototype.onTouchMove = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        /** @type {?} */
        var touch = event.touches[0] || event.changedTouches[0];
        this.swipeMove(touch);
    };
    SwiperDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[swiper]',
                    exportAs: 'swiper'
                },] }
    ];
    /** @nocollapse */
    SwiperDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 }
    ]; };
    SwiperDirective.propDecorators = {
        onSwipeRight: [{ type: Output }],
        onSwipeLeft: [{ type: Output }],
        onSwipeUp: [{ type: Output }],
        onSwipeDown: [{ type: Output }],
        onSwipe: [{ type: Output }],
        onSwipeStart: [{ type: Output }],
        onSwipeEnd: [{ type: Output }],
        swipeLeft: [{ type: Output }],
        swipeRight: [{ type: Output }],
        onTouchStart: [{ type: HostListener, args: ['touchstart', ['$event'],] }],
        onMouseDown: [{ type: HostListener, args: ['mousedown', ['$event'],] }],
        onMouseUp: [{ type: HostListener, args: ['document:mouseup', ['$event'],] }],
        onTouchEnd: [{ type: HostListener, args: ['touchend', ['$event'],] }],
        onMouseMove: [{ type: HostListener, args: ['mousemove', ['$event'],] }],
        onTouchMove: [{ type: HostListener, args: ['touchmove', ['$event'],] }]
    };
    return SwiperDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CarouselComponent = /** @class */ (function () {
    function CarouselComponent(componentElement) {
        this.componentElement = componentElement;
        this.itemsCarouselRendered = 0;
        this.morePairSlides = 1;
        this.threshold = 5;
        this.angle = 45;
        this.ratioScale = 1;
        this.margin = 20;
        this.perspective = 2000;
        this.endInSlide = true;
        this.timeToSlide = 300;
        this.lockSlides = false;
        this.initialSlide = 0;
        this.loop = false;
        this.mode = 'horizontal';
        // autoPlay
        this.autoPlay = false;
        this.delayAutoPlay = 3000;
        this.onInit = new EventEmitter();
        this.onReady = new EventEmitter();
        this.onChangeProperties = new EventEmitter();
        this.onSlideChange = new EventEmitter();
        this.onSlideCentered = new EventEmitter();
        this.onTransitionStart = new EventEmitter();
        this.onTransitionEnd = new EventEmitter();
        this.onSlideNextTransitionStart = new EventEmitter();
        this.onSlideNextTransitionEnd = new EventEmitter();
        this.onSlidePrevTransitionStart = new EventEmitter();
        this.onSlidePrevTransitionEnd = new EventEmitter();
        this.onSlideMove = new EventEmitter();
        this.onSlideMoveEnd = new EventEmitter();
        this.onSlideMoveStart = new EventEmitter();
        this.onTouchMove = new EventEmitter();
        this.onTouchStart = new EventEmitter();
        this.onTouchEnd = new EventEmitter();
        this.onReachBeginning = new EventEmitter();
        this.onReachEnd = new EventEmitter();
        this.carousel = new Carousel();
    }
    /**
     * @param {?} $event
     * @return {?}
     */
    CarouselComponent.prototype.onDomChange = /**
     * @param {?} $event
     * @return {?}
     */
    function ($event) {
        if ($event.addedNodes.length > 0) {
            if (this.itemsCarouselRendered === 0) {
                this.reInit();
            }
            else {
                this.update();
                this.updateCssShowSlides();
            }
            this.itemsCarouselRendered = this.carouselElm.nativeElement.getElementsByClassName('item-carousel').length;
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.onInit.emit(this.carousel);
        this.itemsCarouselRendered = this.carouselElm.nativeElement.getElementsByClassName('item-carousel').length;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    CarouselComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        Object.keys(changes).map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            if (changes[val].currentValue !== changes[val].previousValue && !changes[val].isFirstChange()) {
                _this.update();
                _this.onChangeProperties.emit(changes);
            }
        }));
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.initEventsPan();
        this.configPlugin();
        setTimeout((/**
         * @return {?}
         */
        function () {
            this.componentElement.nativeElement.className += ' ready';
        }).bind(this));
        this.onReady.emit(this.carousel);
    };
    /**
     * @param {?} val
     * @return {?}
     */
    CarouselComponent.prototype.lockCarousel = /**
     * @param {?} val
     * @return {?}
     */
    function (val) {
        this.carousel.lockSlides = val;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.slideNext = /**
     * @return {?}
     */
    function () {
        if (this.checkLimitsCarrousel(this.carousel.activeIndex + 1)) {
            this.moveSlideTo(this.carousel.activeIndex + 1);
            /** @type {?} */
            var vm_1 = this;
            setTimeout((/**
             * @return {?}
             */
            function () { return vm_1.detectCurrentSlide(); }));
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.slidePrev = /**
     * @return {?}
     */
    function () {
        if (this.checkLimitsCarrousel(this.carousel.activeIndex - 1)) {
            this.moveSlideTo(this.carousel.activeIndex - 1);
            /** @type {?} */
            var vm_2 = this;
            setTimeout((/**
             * @return {?}
             */
            function () { return vm_2.detectCurrentSlide(); }));
        }
    };
    /**
     * @param {?} index
     * @return {?}
     */
    CarouselComponent.prototype.slideTo = /**
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (this.checkLimitsCarrousel(index)) {
            this.moveSlideTo(index);
            /** @type {?} */
            var vm_3 = this;
            setTimeout((/**
             * @return {?}
             */
            function () { return vm_3.detectCurrentSlide(); }));
        }
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.autoPlayStart = /**
     * @return {?}
     */
    function () {
        this.autoPlay = true;
        this.autoPlaySlide();
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.autoPlayStop = /**
     * @return {?}
     */
    function () {
        clearInterval(this.autoPlayTimeout);
        this.carousel.autoPlayIsRunning = false;
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.toggleMode = /**
     * @return {?}
     */
    function () {
        this.mode = this.mode === 'vertical' ? 'horizontal' : 'vertical';
        this.update();
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.reInit = /**
     * @return {?}
     */
    function () {
        this.carousel = new Carousel;
        this.configPlugin();
    };
    /**
     * @return {?}
     */
    CarouselComponent.prototype.update = /**
     * @return {?}
     */
    function () {
        this.setPerspectiveContainer();
        this.checkRotation();
        this.carousel.items = Array.from(this.carouselElm.nativeElement.getElementsByClassName('item-carousel'));
        this.carousel.totalItems = this.carousel.items.length;
        this.getmaxSizes();
        this.carousel.lockSlides = this.lockSlides;
        this.setDegreesOnSlides();
        this.setTransformCarrousel(-this.carousel.degreesSlides[this.carousel.activeIndex]);
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.configPlugin = /**
     * @private
     * @return {?}
     */
    function () {
        this.update();
        this.manageEvents();
        this.initSlidesOn();
        this.updateCssShowSlides();
        this.autoPlaySlide();
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.initEventsPan = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.swiper.onSwipe.subscribe((/**
         * @param {?} distance
         * @return {?}
         */
        function (distance) {
            _this.rotate(distance);
        }));
        this.swiper.onSwipeEnd.subscribe((/**
         * @param {?} distance
         * @return {?}
         */
        function (distance) {
            _this.rotate(distance);
        }));
    };
    /**
     * @private
     * @param {?} e
     * @return {?}
     */
    CarouselComponent.prototype.rotate = /**
     * @private
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (!this.carousel.lockSlides) {
            /** @type {?} */
            var velocity = this.carousel.isHorizontal ? e.velocityX / this.threshold : -e.velocityY / this.threshold;
            this.setNewDeg(this.carousel.currdeg + velocity * window.devicePixelRatio);
            this.moveCarrousel(this.carousel.currdeg);
            if (e.isFinal && this.endInSlide) {
                this.moveSlideTo(this.carousel.activeIndex);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.autoPlaySlide = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.autoPlay) {
            this.autoPlayTimeout = setTimeout((/**
             * @return {?}
             */
            function () {
                this.carousel.autoPlayIsRunning = true;
                this.slideNext();
                this.autoPlaySlide();
            }).bind(this), this.delayAutoPlay);
        }
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.initSlidesOn = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.initialSlide >= 0 && this.initialSlide < this.carousel.items.length) {
            this.carousel.activeIndex = parseInt(this.initialSlide.toString());
        }
        else if (this.initialSlide >= this.carousel.items.length) {
            this.carousel.activeIndex = this.carousel.items.length - 1;
            this.initialSlide = this.carousel.activeIndex;
        }
        else {
            this.carousel.activeIndex = 0;
            this.initialSlide = this.carousel.activeIndex;
        }
        /** @type {?} */
        var newDeg = this.carousel.activeIndex * this.angle;
        this.setNewDeg(-newDeg);
        this.setTransformCarrousel(-newDeg);
    };
    /**
     * @private
     * @param {?} newDeg
     * @return {?}
     */
    CarouselComponent.prototype.setNewDeg = /**
     * @private
     * @param {?} newDeg
     * @return {?}
     */
    function (newDeg) {
        this.carousel.currdeg = newDeg;
        if (this.carousel.currdeg > 0) {
            this.carousel.currdeg = 0;
        }
        if (this.carousel.currdeg < -this.carousel.maxDegree) {
            this.carousel.currdeg = -this.carousel.maxDegree;
        }
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.checkRotation = /**
     * @private
     * @return {?}
     */
    function () {
        this.carousel.isHorizontal = this.mode !== 'vertical';
        this.rotationFn = this.carousel.isHorizontal ? 'rotateY'
            : 'rotateX';
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    CarouselComponent.prototype.checkLimitsCarrousel = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        return this.carousel.activeIndex !== index && index >= 0 && index < this.carousel.totalItems;
    };
    /**
     * @private
     * @param {?} index
     * @return {?}
     */
    CarouselComponent.prototype.moveSlideTo = /**
     * @private
     * @param {?} index
     * @return {?}
     */
    function (index) {
        this.setNewDeg(-this.carousel.degreesSlides[index]);
        this.moveCarrousel(this.carousel.currdeg, this.timeToSlide);
    };
    /**
     * @private
     * @param {?} deg
     * @param {?=} timeTransform
     * @return {?}
     */
    CarouselComponent.prototype.moveCarrousel = /**
     * @private
     * @param {?} deg
     * @param {?=} timeTransform
     * @return {?}
     */
    function (deg, timeTransform) {
        if (timeTransform === void 0) { timeTransform = 0; }
        /** @type {?} */
        var transition = "transform " + timeTransform + "ms";
        this.carouselElm.nativeElement.style.transition = transition;
        this.carouselElm.nativeElement.style.webkitTransition = transition;
        this.setTransformCarrousel(deg);
        this.detectCurrentSlide();
    };
    /**
     * @private
     * @param {?} deg
     * @return {?}
     */
    CarouselComponent.prototype.setTransformCarrousel = /**
     * @private
     * @param {?} deg
     * @return {?}
     */
    function (deg) {
        /** @type {?} */
        var transform = "translateZ(" + -this.radius + "px) " + this.rotationFn + "(" + deg + "deg)";
        this.carouselElm.nativeElement.style.transform = transform;
        this.carouselElm.nativeElement.style.webkitTransform = transform;
        this.sendSlideIsCentered();
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.sendSlideIsCentered = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.carousel.currdeg === -this.carousel.degreesSlides[this.carousel.activeIndex]) {
            this.onSlideCentered.emit(this.carousel);
        }
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.setPerspectiveContainer = /**
     * @private
     * @return {?}
     */
    function () {
        this.containerElm.nativeElement.style.perspective = this.perspective;
        this.containerElm.nativeElement.style.webkitPerspective = this.perspective;
        this.containerElm.nativeElement.style.MozPerspective = this.perspective;
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.getmaxSizes = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        this.carousel.items.map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var width = val.offsetWidth;
            /** @type {?} */
            var height = val.offsetHeight;
            _this.carousel.maxWidthSize = 0;
            _this.carousel.maxHeightSize = 0;
            if (width > _this.carousel.maxWidthSize) {
                _this.carousel.maxWidthSize = width;
                _this.carousel.totalWidth = _this.carousel.items.length * _this.carousel.maxWidthSize;
            }
            if (height > _this.carousel.maxHeightSize) {
                _this.carousel.maxHeightSize = height;
                _this.carousel.totalWidth = _this.carousel.items.length * _this.carousel.maxHeightSize;
            }
        }));
        this.setContainerWithMaxSize();
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.setContainerWithMaxSize = /**
     * @private
     * @return {?}
     */
    function () {
        this.containerElm.nativeElement.style.width = this.carousel.maxWidthSize + 'px';
        this.containerElm.nativeElement.style.height = this.carousel.maxHeightSize + 'px';
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.setDegreesOnSlides = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var auxDegree = 0;
        /** @type {?} */
        var panelSize = this.carousel.isHorizontal ? this.carousel.maxWidthSize : this.carousel.maxHeightSize;
        this.radius = (Math.round((panelSize / 2) /
            Math.tan(Math.PI / (360 / this.angle))) + this.margin);
        this.carousel.degreesSlides = [];
        this.carousel.items.map((/**
         * @param {?} val
         * @param {?} index
         * @return {?}
         */
        function (val, index) {
            /** @type {?} */
            var transform = _this.rotationFn + "(" + auxDegree + "deg) translateZ(" + _this.radius + "px)";
            val.style.transform = transform;
            val.style.webkitTransform = transform;
            _this.carousel.degreesSlides.push(auxDegree);
            _this.carousel.maxDegree = auxDegree;
            auxDegree += _this.angle;
        }));
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.detectCurrentSlide = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var aux = 99e9;
        /** @type {?} */
        var index = 0;
        this.carousel.degreesSlides.forEach((/**
         * @param {?} val
         * @param {?} i
         * @return {?}
         */
        function (val, i) {
            /** @type {?} */
            var res = Math.abs(val - Math.abs(_this.carousel.currdeg));
            if (res < aux) {
                aux = res;
                index = i;
            }
        }));
        if (this.carousel.activeIndex !== index) {
            this.carousel.lastIndex = this.carousel.activeIndex;
            this.carousel.activeIndex = index;
            this.updateCssShowSlides();
            this.onSlideChange.emit(this.carousel);
            if (this.carousel.activeIndex === 0) {
                this.onReachBeginning.emit(this.carousel);
            }
            else if (this.carousel.activeIndex === this.carousel.totalItems - 1) {
                this.onReachEnd.emit(this.carousel);
            }
        }
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.updateCssShowSlides = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var vm = this;
        /** @type {?} */
        var currentIndex = vm.carousel.activeIndex;
        /** @type {?} */
        var actual = this.carousel.items[currentIndex];
        vm.removeClassShowSlides('actual');
        vm.removeClassShowSlides('prev');
        vm.removeClassShowSlides('next');
        if (actual) {
            actual.className += ' actual';
        }
        for (var x = 0; x < this.morePairSlides; x++) {
            /** @type {?} */
            var prev = vm.carousel.items[currentIndex - (x + 1)];
            /** @type {?} */
            var next = vm.carousel.items[currentIndex + (x + 1)];
            if (prev) {
                prev.className += ' prev';
            }
            if (next) {
                next.className += ' next';
            }
        }
    };
    /**
     * @private
     * @param {?} tagClass
     * @return {?}
     */
    CarouselComponent.prototype.removeClassShowSlides = /**
     * @private
     * @param {?} tagClass
     * @return {?}
     */
    function (tagClass) {
        if (this.carouselElm.nativeElement.getElementsByClassName(tagClass).length > 0) {
            Array.from(this.carouselElm.nativeElement.getElementsByClassName(tagClass)).map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                val['classList'].remove(tagClass);
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    CarouselComponent.prototype.manageEvents = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var vm = this;
        this.swiper.onSwipe.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            vm.onSlideMove.emit({ carousel: vm.carousel, event: e });
            vm.onTouchMove.emit({ carousel: vm.carousel, event: e });
        }));
        this.swiper.onSwipeStart.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            vm.onSlideMoveStart.emit({ carousel: vm.carousel, event: e });
            vm.onTouchStart.emit({ carousel: vm.carousel, event: e });
        }));
        this.swiper.onSwipeEnd.subscribe((/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            vm.onSlideMoveEnd.emit({ carousel: vm.carousel, event: e });
            vm.onTouchEnd.emit({ carousel: vm.carousel, event: e });
        }));
        this.carouselElm.nativeElement.addEventListener('transitionend', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var elm = { carousel: vm.carousel, event: e };
            if (e.propertyName === 'transform') {
                _this.onTransitionEnd.emit(elm);
                if (vm.carousel.lastIndex > vm.carousel.activeIndex) {
                    _this.onSlideNextTransitionEnd.emit(elm);
                }
                else {
                    _this.onSlidePrevTransitionEnd.emit(elm);
                }
            }
        }));
        this.carouselElm.nativeElement.addEventListener('transitionstart', (/**
         * @param {?} e
         * @return {?}
         */
        function (e) {
            /** @type {?} */
            var elm = { carousel: vm.carousel, event: e };
            if (e.propertyName === 'transform') {
                _this.onTransitionStart.emit(elm);
                // if (e.direction === Hammer.DIRECTION_LEFT) {
                //   vm.onSlideNextTransitionStart.emit(elm);
                // } else if (e.direction === Hammer.DIRECTION_RIGHT) {
                //   vm.onSlidePrevTransitionStart.emit(elm);
                // }
            }
        }));
        window.addEventListener('resize', (/**
         * @return {?}
         */
        function () {
            this.update();
        }).bind(this));
    };
    CarouselComponent.decorators = [
        { type: Component, args: [{
                    selector: 'carousel-component',
                    template: '<div class="container" #container>\n' +
                        '  <div class="carousel" #carousel swiper (domChange)="onDomChange($event)">\n' +
                        '    <ng-content select=".item-carousel"></ng-content>\n' +
                        '  </div>\n' +
                        '</div>',
                    styles: ["\n   :host{\n        display: flex;\n    }\n   :host .container {\n        margin: 0 auto;\n        width: 600px;\n        height: 400px;\n        position: relative;\n    }\n   :host .container .carousel {\n        height: 100%;\n        width: 100%;\n        position: absolute;\n        -webkit-transform-style: preserve-3d;\n        -moz-transform-style: preserve-3d;\n        -o-transform-style: preserve-3d;\n        transform-style: preserve-3d;\n\n    }\n   :host.ready .carousel {\n        -webkit-transition: -webkit-transform 300ms;\n        -moz-transition:-moz-transform 300ms;\n        -o-transition: -o-transform 300ms;\n        transition: transform 300ms;\n    }\n   :host .container .carousel::content >>> .item-carousel {\n        display: block;\n        position: absolute;\n        border:1px solid black;\n        width: 100%;\n        height: 100%;\n        text-align: center;\n        transform-style: preserve-3d;\n        opacity: 0;\n    }\n   :host.ready .carousel::content >>> .item-carousel {\n        -webkit-transition: opacity 300ms, -webkit-transform 300ms;\n        -moz-transition: opacity 300ms, -moz-transform 300ms;\n        -o-transition: opacity 300ms, -o-transform 300ms;\n        transition: opacity 300ms, transform 300ms;\n    }\n\n   :host .container .carousel::content >>> .item-carousel img{\n        user-drag: none;\n        user-select: none;\n        -moz-user-select: none;\n        -webkit-user-drag: none;\n        -webkit-user-select: none;\n        -ms-user-select: none;\n    }\n\n   :host .container .carousel::content >>> .item-carousel.next,\n   :host .container .carousel::content >>> .item-carousel.prev,\n   :host .container .carousel::content >>> .item-carousel.actual{\n        opacity: 0.95;\n    }\n  "]
                }] }
    ];
    /** @nocollapse */
    CarouselComponent.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    CarouselComponent.propDecorators = {
        swiper: [{ type: ViewChild, args: [SwiperDirective,] }],
        morePairSlides: [{ type: Input }],
        threshold: [{ type: Input }],
        angle: [{ type: Input }],
        ratioScale: [{ type: Input }],
        margin: [{ type: Input }],
        perspective: [{ type: Input }],
        endInSlide: [{ type: Input }],
        timeToSlide: [{ type: Input }],
        lockSlides: [{ type: Input }],
        initialSlide: [{ type: Input }],
        loop: [{ type: Input }],
        mode: [{ type: Input }],
        autoPlay: [{ type: Input }],
        delayAutoPlay: [{ type: Input }],
        onInit: [{ type: Output }],
        onReady: [{ type: Output }],
        onChangeProperties: [{ type: Output }],
        onSlideChange: [{ type: Output }],
        onSlideCentered: [{ type: Output }],
        onTransitionStart: [{ type: Output }],
        onTransitionEnd: [{ type: Output }],
        onSlideNextTransitionStart: [{ type: Output }],
        onSlideNextTransitionEnd: [{ type: Output }],
        onSlidePrevTransitionStart: [{ type: Output }],
        onSlidePrevTransitionEnd: [{ type: Output }],
        onSlideMove: [{ type: Output }],
        onSlideMoveEnd: [{ type: Output }],
        onSlideMoveStart: [{ type: Output }],
        onTouchMove: [{ type: Output }],
        onTouchStart: [{ type: Output }],
        onTouchEnd: [{ type: Output }],
        onReachBeginning: [{ type: Output }],
        onReachEnd: [{ type: Output }],
        carouselElm: [{ type: ViewChild, args: ['carousel',] }],
        containerElm: [{ type: ViewChild, args: ['container',] }]
    };
    return CarouselComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var DomChangeDirective = /** @class */ (function () {
    function DomChangeDirective(elementRef) {
        var _this = this;
        this.elementRef = elementRef;
        this.domChange = new EventEmitter();
        /** @type {?} */
        var element = this.elementRef.nativeElement;
        this.changes = new MutationObserver((/**
         * @param {?} mutations
         * @return {?}
         */
        function (mutations) {
            mutations.forEach((/**
             * @param {?} mutation
             * @return {?}
             */
            function (mutation) { return _this.domChange.emit(mutation); }));
        }));
        this.changes.observe(element, {
            attributes: true,
            childList: true,
            characterData: true
        });
    }
    /**
     * @return {?}
     */
    DomChangeDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.changes.disconnect();
    };
    DomChangeDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[domChange]'
                },] }
    ];
    /** @nocollapse */
    DomChangeDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    DomChangeDirective.propDecorators = {
        domChange: [{ type: Output }]
    };
    return DomChangeDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
var COMPONENTS = [
    CarouselComponent,
];
/** @type {?} */
var DIRECTIVES = [
    SwiperDirective,
    DomChangeDirective
];
var CarouselModule = /** @class */ (function () {
    function CarouselModule() {
    }
    CarouselModule.decorators = [
        { type: NgModule, args: [{
                    declarations: __spread(COMPONENTS, DIRECTIVES),
                    imports: [],
                    exports: __spread(COMPONENTS, DIRECTIVES),
                },] }
    ];
    return CarouselModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { CarouselComponent, CarouselModule, DomChangeDirective as Éµb, SwiperDirective as Éµa };

//# sourceMappingURL=ngx-carousel-lib.js.map